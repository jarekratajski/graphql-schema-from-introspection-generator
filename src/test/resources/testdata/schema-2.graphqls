type Customer {
    # fields with ! are required
    id: ID!
    name: String!
    email: String!
    company: Company
    orders: [Order]
}

type Company {
    id: ID!
    name: String!
    website: String!
}

type Order {
    id: ID!
    status: Status
    items: [Item]
}

enum Status {
    NEW, CANCELED, DONE
}

type Item {
    id: ID!
    name: String!
    amount: Int
    price: String
    currency: String
    producer: Company
}

type CreateCustomerPayload {
    customer: Customer
    clientMutationId: String!
}

input CreateCustomerInput {
    name: String
    email: String
    clientMutationId: String!
}

type Query {
    customer(id: String!): Customer!
    customers: [Customer]!
}

type Mutation {
    createCustomer(input: CreateCustomerInput): CreateCustomerPayload!
}